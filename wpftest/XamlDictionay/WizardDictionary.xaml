<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:dgx="clr-namespace:DataGridExtensions;assembly=DataGridExtensions"
                    xmlns:local="clr-namespace:WizMes_ParkPro">
    <!-- 전체의 글꼴 및 글자크기 설정 -->
    <Style TargetType="Button" x:Key="btnInNoViewBox">
        <Setter Property="Background" Value="#eff9ff" />
    </Style>

    <Style TargetType="CheckBox" x:Key="chkInNoViewBox">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>

    <DataTemplate x:Key="HorizonalCenterFilter" >
        <StackPanel HorizontalAlignment="Center" Orientation="Horizontal">
            <ContentPresenter x:Name="center" Content="{Binding}" 
                          SnapsToDevicePixels="{Binding SnapsToDevicePixels, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=DataGridColumnHeader}}"
                          HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=DataGridColumnHeader}}"
                          VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=DataGridColumnHeader}}" />
            <dgx:DataGridFilterColumnControl HorizontalAlignment="Right"/>
        </StackPanel>
    </DataTemplate>
    <DataTemplate x:Key="HorizonalCenter" >
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <StackPanel Grid.Column="1" HorizontalAlignment="Center">
                <ContentPresenter x:Name="center" Content="{Binding}" Grid.Column="1"
                          SnapsToDevicePixels="{Binding SnapsToDevicePixels, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=DataGridColumnHeader}}"
                          HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=DataGridColumnHeader}}"
                          VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=DataGridColumnHeader}}" />
            </StackPanel>
            <dgx:DataGridFilterColumnControl Grid.Column="2" HorizontalAlignment="Right"/>
        </Grid>
    </DataTemplate>

    <Style TargetType="{x:Type TextBox}" x:Key="ViewBoxTextBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Border.Background>
                            <SolidColorBrush Color="{DynamicResource ControlLightColor}" />
                        </Border.Background>
                        <Border.BorderBrush>
                            <SolidColorBrush Color="{DynamicResource BorderMediumColor}" />
                        </Border.BorderBrush>
                        <Grid Background="{TemplateBinding Background}">
                            <Viewbox>
                                <StackPanel>
                                    <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                      Margin="3" RecognizesAccessKey="True" SnapsToDevicePixels="True"
                                                      Content="{Binding YYYY}">
                                    </ContentPresenter>
                                </StackPanel>
                            </Viewbox>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style TargetType="{x:Type Label}" x:Key="noViewboxLabel">
        <Setter Property="Background" Value="#ededed" />
        <Setter Property="BorderBrush" Value="Gray" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template" >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}" >
                    <Border BorderBrush="Gray"
                                BorderThickness="1"
                                Background="{TemplateBinding Background}"
                                Padding="2"
                                SnapsToDevicePixels="True"
                                CornerRadius="5">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
	                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#region 버튼안의 각종 Content -->

    <BitmapImage x:Key="Arrow_Down" UriSource="/images/Arrow_Down.png" />
    <BitmapImage x:Key="Arrow_Up" UriSource="/images/Arrow_Up.png" />

    <BitmapImage x:Key="Icon_Checked" UriSource="/images/Icon_Checked.png" />

    <!--<BitmapImage x:Key="btiPurpleBook" UriSource="/images/icons8-book-48.png" />
    <BitmapImage x:Key="btiPurpleOpenBook" UriSource="/images/icons8-literature-64.png" />-->
    <BitmapImage x:Key="btiPurpleBook" UriSource="/images/OpenFolder_64pix.png" />
    <BitmapImage x:Key="btiPurpleOpenBook" UriSource="/images/Readingfolder_64pix.png" />
    <BitmapImage x:Key="loading" UriSource="/images/Loading.png" />

    <BitmapImage x:Key="btiBlueBook" UriSource="/images/icons8-copybook-48.png" />
    <BitmapImage x:Key="btiBlueOpenBook" UriSource="/images/icons8-literature-16.png" />

    <BitmapImage x:Key="btiPaper" UriSource="/images/icons8-paper-40.png" />
    <BitmapImage x:Key="btiView" UriSource="/images/icons8-view-details-40.png" />

    <BitmapImage x:Key="btiAddFill" UriSource="/images/icons8-add-new-filled-32.png" />
    <BitmapImage x:Key="btiReduceFill" UriSource="/images/icons8-reduce-filled-32.png" />

    <BitmapImage x:Key="btiMathPlus" UriSource="/images/icons8-plus-math-40.png" />
    <BitmapImage x:Key="btiMathMinus" UriSource="/images/icons8-subtract-40.png" />
    
    <BitmapImage x:Key="btiSearch" UriSource="/images/Search.bmp" />
    <TextBlock x:Key="tblSearch" Text="검색(F)" />
    <BitmapImage x:Key="btiUpdate" UriSource="/images/Edit.bmp" />
    <TextBlock x:Key="tblUpdate" Text="수정(U)" />
    <BitmapImage x:Key="btiDelete" UriSource="/images/Delete.bmp" />
    <TextBlock x:Key="tblDelete" Text="삭제(D)" />
    <BitmapImage x:Key="btiSave" UriSource="/images/save.bmp" />
    <TextBlock x:Key="tblSave" Text="저장(S)" />
    <BitmapImage x:Key="btiClose" UriSource="/images/Close.bmp" />
    <TextBlock x:Key="tblClose" Text="닫기(X)" />
    <BitmapImage x:Key="btiExcel" UriSource="/images/Exel.bmp" />
    <TextBlock x:Key="tblExcel" Text="엑셀(E)" />
    <BitmapImage x:Key="btiCancle" UriSource="/images/cancel.bmp" />
    <TextBlock x:Key="tblCancle" Text="취소(C)" />
    <BitmapImage x:Key="btiInsert" UriSource="/images/AddNew.bmp" />
    <TextBlock x:Key="tblInsert" Text="추가(A)" />
    <BitmapImage x:Key="btiPrint" UriSource="/images/Print.bmp" />
    <TextBlock x:Key="tblPrint" Text="인쇄(P)" />
    <BitmapImage x:Key="btiUpload" UriSource="/images/Upload.bmp" />
    <TextBlock x:Key="tblUpload" Text="업로드(I)" />
    <BitmapImage x:Key="btiHTML" UriSource="/images/HTML.ico" />
    <TextBlock x:Key="tblHTML" Text="HTML" />
    <BitmapImage x:Key="btiBarCode" UriSource="/images/BarCode.ico" />
    <TextBlock x:Key="tblBarCode" Text="Tag" />
    <BitmapImage x:Key="btiAddLeft" UriSource="/images/addLeft.bmp" />
    <BitmapImage x:Key="btiAddRight" UriSource="/images/addRight.bmp" />
    <BitmapImage x:Key="btiBack" UriSource="/images/Back.ico" />
    <BitmapImage x:Key="btiFront" UriSource="/images/Front.ico" />
    <BitmapImage x:Key="btiMenu" UriSource="/images/Menu.ico" />
    <BitmapImage x:Key="btiMonitor" UriSource="/images/Monitor.ico" />
    <BitmapImage x:Key="btiQuit" UriSource="/images/Quit.ico" />
    <BitmapImage x:Key="btiUnfolder" UriSource="/images/Unfolder.ico" />
    <BitmapImage x:Key="btiLogo_IconMES" UriSource="/images/icon_MES.jpg" />
    <BitmapImage x:Key="btiLogo" UriSource="/images/login.bmp" />
    <BitmapImage x:Key="btiAFT_Logo" UriSource="/images/logo.png" />
    <BitmapImage x:Key="btiAFT_CopyLogo" UriSource="/images/logo_copy.png" />
    <BitmapImage x:Key="btiGLS_Logo" UriSource="/images/logo_GLS.png" />
    <BitmapImage x:Key="btiAFT_Company" UriSource="/images/notice_img.jpg" />
    <BitmapImage x:Key="btiCheck" UriSource="/images/ok.bmp" />
    <TextBlock x:Key="tblCheck" Text="선택(C)" />
    <TextBlock x:Key="tblRefresh" Text="새로고침" />
    <!--2021-11-15 일 생산 상세현황에서 사용하기 위해 추가-->
    <TextBlock x:Key="tblRefreshUpdate" Text="생산집계&#10;업데이트" />
    <BitmapImage x:Key="btiRefresh" UriSource="/images/Refresh.bmp" />
    <BitmapImage x:Key="btiPlusFind" UriSource="/images/search6.png" />
    <Style TargetType="Image" x:Key="PfImgSize">
        <Setter Property="Width" Value="25" />
        <Setter Property="Height" Value="25" />
    </Style>
    <Style TargetType="Image" x:Key="imgSize">
        <Setter Property="Width" Value="25" />
        <Setter Property="Height" Value="25" />
    </Style>
    <Style TargetType="Image" x:Key="imgPlusFind">
        <Setter Property="Width" Value="15" />
        <Setter Property="Height" Value="15" />
    </Style>
    <!--#endregion-->

    <!-- Style : Text BackColor  키값으로 지정 -->
    <Style x:Key="returnText" TargetType="TextBox">
        <Setter Property="Background" Value="#fef3d1" />
    </Style>

    <Style x:Key="NumericAndReadOnlyTextBox" TargetType="TextBox">
        <Setter Property="TextAlignment" Value="Right"/>
        <Setter Property="Background" Value="#c2fdc3" />
        <Setter Property="IsReadOnly" Value="True"/>
    </Style>
    <Style x:Key="NumericAndReadOnlyNoBackTextBox" TargetType="TextBox">
        <Setter Property="TextAlignment" Value="Right"/>
        <Setter Property="IsReadOnly" Value="True"/>
    </Style>
    <Style x:Key="NumericTextBlock" TargetType="TextBlock">
        <Setter Property="TextAlignment" Value="Right"/>
    </Style>

    <Style x:Key="NumericDataGridCell" TargetType="DataGridCell">
        <Setter Property="TextBlock.TextAlignment" Value="Right"/>
    </Style>
    
    <Style x:Key="NonNumericDataGridCell" TargetType="DataGridCell">
        <Setter Property="TextBlock.TextAlignment" Value="Left"/>
        <Setter Property="TextBlock.VerticalAlignment" Value="Center"/>
    </Style>
    <Style x:Key="NumericDataGridCellAndPadding" TargetType="DataGridCell">
        <Setter Property="TextBlock.TextAlignment" Value="Right"/>
        <Setter Property="Padding" Value="3" />
    </Style>
    <Style x:Key="DataGridCellAndCentering" TargetType="DataGridCell">
        <Setter Property="TextBlock.TextAlignment" Value="Center"/>
    </Style>
    <Style x:Key="DataGridCellText" TargetType="DataGridCell">
        <Setter Property="TextBlock.TextAlignment" Value="Left"/>
    </Style>
    <Style x:Key="DataGridCellCenter" TargetType="TextBlock">
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>
    <Style x:Key="DataGridCellLeft" TargetType="TextBlock">
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>
    <Style x:Key="DataGridCellRight" TargetType="TextBlock">
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <Style x:Key="readOnlyTextBox" TargetType="TextBox">
        <Setter Property="Background" Value="#c2fdc3" />
    </Style>
    <Style x:Key="essentialTextBox" TargetType="TextBox">
        <Setter Property="Background" Value="#fff2d2" />
    </Style>
    <Style x:Key="essentialComboBox" TargetType="ComboBox">
        <Setter Property="Background" Value="#fff2d2" />
    </Style>
    <Style x:Key="popTextBox" TargetType="TextBox">
        <Setter Property="Background" Value="#c1bfff" />
    </Style>
    <Style x:Key="BarcordeTextBox" TargetType="TextBox">
        <Setter Property="Background" Value="#80ff80" />
    </Style>
    <Color x:Key="colorReadOnly"    R="194" G="253" B="195" />
    <Color x:Key="colorEssential"   R="255" G="242" B="210" />
    <Color x:Key="colorPop"         R="193" G="191" B="255" />
    <Color x:Key="colorBarcorde"    R="128" G="255" B="128" />

    <Style x:Key="FocusChangeTextBox" TargetType="TextBox">
        <Style.Triggers>
            <Trigger Property="IsFocused" Value="true">
                <Setter Property="Background" Value="#3399ff" />
                <Setter Property="BorderBrush" Value="Black"/>
                <Setter Property="BorderThickness" Value="2"/>
            </Trigger>
        </Style.Triggers>
        <Setter Property="HorizontalContentAlignment" Value="Right"/>
    </Style>
    <ControlTemplate x:Key="ScrollViewerHorizontalOnTopTemplate" TargetType="{x:Type ScrollViewer}">
        <Grid x:Name="Grid" Background="{TemplateBinding Background}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" MinHeight="17"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <Rectangle x:Name="Corner" 
                    Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" 
                    Grid.Column="1" Grid.Row="0"/>
            <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" Grid.Column="0" Grid.Row="1" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False"/>
            <ScrollBar x:Name="PART_VerticalScrollBar" 
                    Cursor="Arrow" 
                    Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" 
                    Grid.Column="1" Grid.Row="1" 
                    AutomationProperties.AutomationId="VerticalScrollBar" 
                    Maximum="{TemplateBinding ScrollableHeight}" 
                    Minimum="0" 
                    Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" 
                    ViewportSize="{TemplateBinding ViewportHeight}"/>
            <ScrollBar x:Name="PART_HorizontalScrollBar" 
                    Cursor="Arrow" 
                    Grid.Column="0" 
                    AutomationProperties.AutomationId="HorizontalScrollBar" 
                    Maximum="{TemplateBinding ScrollableWidth}" 
                    Minimum="0" 
                    Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" 
                    Orientation="Horizontal" 
                    ViewportSize="{TemplateBinding ViewportWidth}"/>
        </Grid>
    </ControlTemplate>

    <Style x:Key="ExpandCollapseToggleStyle" TargetType="ToggleButton">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid  Width="{Binding FontSize,RelativeSource={RelativeSource Mode=FindAncestor, 
                    AncestorType=local:MainWindow}}" 
                       Height="{Binding FontSize,RelativeSource={RelativeSource Mode=FindAncestor, 
                    AncestorType=local:MainWindow}}" Background="Transparent">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
                                                 Storyboard.TargetName="Collapsed">
                                            <DiscreteObjectKeyFrame KeyTime="0"
                                            Value="{x:Static Visibility.Hidden}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
                                                 Storyboard.TargetName="Expanded">
                                            <DiscreteObjectKeyFrame KeyTime="0"
                                            Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked" />
                                <VisualState x:Name="Indeterminate" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Image Source="{StaticResource btiUnfolder}" x:Name="Collapsed" HorizontalAlignment="Left"
                                   Margin="1" VerticalAlignment="Top"/>
                        <Image Source="{StaticResource btiUnfolder}" x:Name="Expanded" HorizontalAlignment="Left"
                                   Margin="1" Visibility="Hidden" VerticalAlignment="Top"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate TargetType="TreeViewItem" x:Key="ImageTreeViewItem">
        <StackPanel x:Name="TheStack" Orientation="Horizontal" VerticalAlignment="Center">
            <Image x:Name="imgPaper" Source="{StaticResource btiPurpleBook}" 
                       Width="{Binding FontSize,RelativeSource={RelativeSource Mode=FindAncestor, 
                    AncestorType=local:MainWindow}}" 
                       Height="{Binding FontSize,RelativeSource={RelativeSource Mode=FindAncestor, 
                    AncestorType=local:MainWindow}}"/>
            <Image x:Name="imgView" Source="{StaticResource btiPurpleOpenBook}" 
                       Width="{Binding FontSize,RelativeSource={RelativeSource Mode=FindAncestor, 
                    AncestorType=local:MainWindow}}" 
                       Height="{Binding FontSize,RelativeSource={RelativeSource Mode=FindAncestor, 
                    AncestorType=local:MainWindow}}" Visibility="Collapsed"/>
            <ContentPresenter Content="{TemplateBinding Property=Header}" VerticalAlignment="Center"/>
            <ItemsPresenter x:Name="ItemsPre"/>
        </StackPanel>
        <ControlTemplate.Triggers>
            <!--Trigger used to show the sub items-->
            <Trigger Property="IsExpanded" Value="True">
                <Setter TargetName="ItemsPre" Property="Visibility" Value="Visible"/>
            </Trigger>
            <!--Trigger used to change the color based on selection-->
            <Trigger Property="IsSelected" Value="true">
                <!--Change the background color-->
                <Setter TargetName="TheStack" Property="Background"
                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                <!--Change the foreground color-->
                <Setter Property="Foreground" 
                    Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                <Setter TargetName="imgPaper" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="imgView" Property="Visibility" Value="Visible"/>
            </Trigger>
            <!--Trigger used to change the color based on selection-->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="true"/>
                    <Condition Property="IsSelectionActive" Value="false"/>
                </MultiTrigger.Conditions>
                <!--Change the background color-->
                <Setter TargetName="TheStack" Property="Background"
                    Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                <!--Change the foreground color-->
                <Setter Property="Foreground" 
                    Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            </MultiTrigger>
            <!--Trigger used to change the color based on the status of the item-->
            <Trigger Property="IsEnabled" Value="false">
                <!--Change the foreground color-->
                <Setter Property="Foreground" 
                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate TargetType="TreeViewItem" x:Key="ImageTreeViewItemEx">
        <Grid x:Name="TheStack">
            <Grid.ColumnDefinitions>
                <ColumnDefinition MinWidth="19" Width="auto"/>
                <ColumnDefinition Width="auto"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition />
            </Grid.RowDefinitions>
            <ToggleButton x:Name="Expander" VerticalAlignment="Top"
                        Style="{StaticResource ExpandCollapseToggleStyle}"
                        ClickMode="Press" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"/>
            <ContentPresenter Grid.Column="1" Content="{TemplateBinding Property=Header}" VerticalAlignment="Top"/>
            <ItemsPresenter x:Name="ItemsPre" Visibility="Collapsed" VerticalAlignment="Top"
                                Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="2"/>
        </Grid>

        <ControlTemplate.Triggers>
            <Trigger Property="HasItems"
                   Value="false">
                <Setter TargetName="Expander"
                    Property="Visibility"
                    Value="Hidden" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="HasHeader"
                         Value="false" />
                    <Condition Property="Width"
                         Value="Auto" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ItemsPre"
                    Property="MinWidth"
                    Value="75" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="HasHeader"
                         Value="false" />
                    <Condition Property="Height"
                         Value="Auto" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ItemsPre"
                    Property="MinHeight"
                    Value="19" />
            </MultiTrigger>
            <!--Trigger used to show the sub items-->
            <Trigger Property="IsExpanded" Value="True">
                <Setter TargetName="ItemsPre" Property="Visibility" Value="Visible"/>
            </Trigger>
            <!--Trigger used to change the color based on selection-->
            <Trigger Property="IsSelected" Value="true">
                <!--Change the background color-->
                <Setter TargetName="TheStack" Property="Background"
                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                <!--Change the foreground color-->
                <Setter Property="Foreground" 
                    Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
            </Trigger>
            <!--Trigger used to change the color based on selection-->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="true"/>
                    <Condition Property="IsSelectionActive" Value="false"/>
                </MultiTrigger.Conditions>
                <!--Change the background color-->
                <Setter TargetName="TheStack" Property="Background"
                    Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                <!--Change the foreground color-->
                <Setter Property="Foreground" 
                    Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            </MultiTrigger>
            <!--Trigger used to change the color based on the status of the item-->
            <Trigger Property="IsEnabled" Value="false">
                <!--Change the foreground color-->
                <Setter Property="Foreground" 
                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate TargetType="TreeViewItem" x:Key="ImageTreeViewItemSameLine">
        <Grid x:Name="TheStack">
            <Grid.ColumnDefinitions>
                <ColumnDefinition MinWidth="19" Width="auto"/>
                <ColumnDefinition Width="auto"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition />
            </Grid.RowDefinitions>
            <ToggleButton x:Name="Expander" VerticalAlignment="Top"
                        Style="{StaticResource ExpandCollapseToggleStyle}"
                        ClickMode="Press" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"/>
            <ContentPresenter Grid.Column="1" Content="{TemplateBinding Property=Header}" VerticalAlignment="Top"/>
            <ItemsPresenter x:Name="ItemsPre" Visibility="Collapsed" VerticalAlignment="Top"
                                Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2"/>
        </Grid>

        <ControlTemplate.Triggers>
            <Trigger Property="HasItems"
                   Value="false">
                <Setter TargetName="Expander"
                    Property="Visibility"
                    Value="Hidden" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="HasHeader"
                         Value="false" />
                    <Condition Property="Width"
                         Value="Auto" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ItemsPre"
                    Property="MinWidth"
                    Value="75" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="HasHeader"
                         Value="false" />
                    <Condition Property="Height"
                         Value="Auto" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ItemsPre"
                    Property="MinHeight"
                    Value="19" />
            </MultiTrigger>
            <!--Trigger used to show the sub items-->
            <Trigger Property="IsExpanded" Value="True">
                <Setter TargetName="ItemsPre" Property="Visibility" Value="Visible"/>
            </Trigger>
            <!--Trigger used to change the color based on selection-->
            <Trigger Property="IsSelected" Value="true">
                <!--Change the background color-->
                <Setter TargetName="TheStack" Property="Background"
                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                <!--Change the foreground color-->
                <Setter Property="Foreground" 
                    Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
            </Trigger>
            <!--Trigger used to change the color based on selection-->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="true"/>
                    <Condition Property="IsSelectionActive" Value="false"/>
                </MultiTrigger.Conditions>
                <!--Change the background color-->
                <Setter TargetName="TheStack" Property="Background"
                    Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                <!--Change the foreground color-->
                <Setter Property="Foreground" 
                    Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            </MultiTrigger>
            <!--Trigger used to change the color based on the status of the item-->
            <Trigger Property="IsEnabled" Value="false">
                <!--Change the foreground color-->
                <Setter Property="Foreground" 
                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--Control colors.-->
    <Color x:Key="WindowColor">#FFE8EDF9</Color>
    <Color x:Key="ContentAreaColorLight">#FFC5CBF9</Color>
    <Color x:Key="ContentAreaColorDark">#FF7381F9</Color>

    <Color x:Key="DisabledControlLightColor">#FFE8EDF9</Color>
    <Color x:Key="DisabledControlDarkColor">#FFC5CBF9</Color>
    <Color x:Key="DisabledForegroundColor">#FF888888</Color>

    <Color x:Key="SelectedBackgroundColor">#FFC5CBF9</Color>
    <Color x:Key="SelectedUnfocusedColor">#FFDDDDDD</Color>

    <Color x:Key="ControlLightColor">White</Color>
    <Color x:Key="ControlMediumColor">#FF7381F9</Color>
    <Color x:Key="ControlDarkColor">#FF211AA9</Color>

    <Color x:Key="ControlMouseOverColor">#FF3843C4</Color>
    <Color x:Key="ControlPressedColor">#FF211AA9</Color>


    <Color x:Key="GlyphColor">#FF444444</Color>
    <Color x:Key="GlyphMouseOver">sc#1, 0.004391443, 0.002428215, 0.242281124</Color>

    <!--Border colors-->
    <Color x:Key="BorderLightColor">#FFCCCCCC</Color>
    <Color x:Key="BorderMediumColor">#FF888888</Color>
    <Color x:Key="BorderDarkColor">#FF444444</Color>

    <Color x:Key="PressedBorderLightColor">#FF888888</Color>
    <Color x:Key="PressedBorderDarkColor">#FF444444</Color>

    <Color x:Key="DisabledBorderLightColor">#FFAAAAAA</Color>
    <Color x:Key="DisabledBorderDarkColor">#FF888888</Color>

    <Color x:Key="DefaultBorderBrushDarkColor">Black</Color>

    <!--Control-specific resources.-->
    <Color x:Key="HeaderTopColor">#FFC5CBF9</Color>
    <Color x:Key="DatagridCurrentCellBorderColor">Black</Color>
    <Color x:Key="SliderTrackDarkColor">#FFC5CBF9</Color>

    <Color x:Key="NavButtonFrameColor">#FF3843C4</Color>

    <LinearGradientBrush x:Key="MenuPopupBrush"
                     EndPoint="0.5,1"
                     StartPoint="0.5,0">
        <GradientStop Color="{DynamicResource ControlLightColor}"
                Offset="0" />
        <GradientStop Color="{DynamicResource ControlMediumColor}"
                Offset="0.5" />
        <GradientStop Color="{DynamicResource ControlLightColor}"
                Offset="1" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="ProgressBarIndicatorAnimatedFill"
                     StartPoint="0,0"
                     EndPoint="1,0">
        <LinearGradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#000000FF"
                    Offset="0" />
                <GradientStop Color="#600000FF"
                    Offset="0.4" />
                <GradientStop Color="#600000FF"
                    Offset="0.6" />
                <GradientStop Color="#000000FF"
                    Offset="1" />
            </GradientStopCollection>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

</ResourceDictionary>